{"version":3,"sources":["BreakInterval.js","SessionLength.js","Timer.js","serviceWorker.js","index.js"],"names":["BreakInterval","props","class","id","className","disabled","isPlay","onClick","breakInterval","increaseBreak","decreaseBreak","SessionLength","sessionLenth","increaseSession","sessionLength","decreaseSession","Timer","handleIncreaseBreak","setState","prevState","breakLength","handleDecreaseBreak","handleIncreaseSession","timerCount","handleDecreaseSession","handleSwitch","isSession","state","onResetTimer","onPlayStopTimer","handleUpdateTimerMinSec","count","minute","Math","floor","second","onPlay","isPlaying","clearInterval","intervalId","setInterval","onReset","currentTime","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cd502c22.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./BreakInterval.css\";\r\n\r\nexport default function BreakInterval(props) {\r\n  function increaseCounter() {\r\n    if (props.breakInterval === 60) {\r\n      return;\r\n    }\r\n    props.increaseBreak();\r\n  }\r\n\r\n  function decreaseCounter() {\r\n    if (props.breakInterval === 1) {\r\n      return;\r\n    }\r\n    props.decreaseBreak();\r\n  }\r\n\r\n  return (\r\n    <div class=\"break-section\">\r\n      <h4 id=\"break-label\">Break Length</h4>\r\n      <div className=\"btn-break-section\">\r\n        <button\r\n          disabled={props.isPlay === true ? \"disabled\" : \"\"}\r\n          id=\"break-increment\"\r\n          onClick={increaseCounter}\r\n        >\r\n          <i className=\"fas fa-arrow-circle-up\"></i>\r\n        </button>\r\n        <p id=\"break-length\">{props.breakInterval}</p>\r\n        <button\r\n          disabled={props.isPlay === true ? \"disabled\" : \"\"}\r\n          id=\"break-decrement\"\r\n          onClick={decreaseCounter}\r\n        >\r\n          <i className=\"fas fa-arrow-alt-circle-down\"></i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./SessionLength.css\";\r\n\r\nexport default function SessionLength(props) {\r\n  function increaseSession() {\r\n    if (props.sessionLenth === 60) {\r\n      return;\r\n    }\r\n    props.increaseSession();\r\n  }\r\n\r\n  function decreaseSession() {\r\n    if (props.sessionLength === 1) {\r\n      return;\r\n    }\r\n    props.decreaseSession();\r\n  }\r\n\r\n  return (\r\n    <div className=\"session-section\">\r\n      <h4 id=\"session-label\">Session Length</h4>\r\n      <div className=\"btn-session-section\">\r\n        <button\r\n          disabled={props.isPlay === true ? \"disabled\" : \"\"}\r\n          id=\"session-increment\"\r\n          onClick={increaseSession}\r\n        >\r\n          <i class=\"fas fa-arrow-circle-up\"></i>\r\n        </button>\r\n        <p id=\"session-length\">{props.sessionLength}</p>\r\n        <button\r\n          disabled={props.isPlay === true ? \"disabled\" : \"\"}\r\n          id=\"session-decrement\"\r\n          onClick={decreaseSession}\r\n        >\r\n          <i className=\"fas fa-arrow-alt-circle-down\"></i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./Timer.css\";\r\nimport BreakInterval from \"./BreakInterval\";\r\nimport SessionLength from \"./SessionLength\";\r\n\r\nclass Timer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      isSession: true,\r\n      breakLength: 5,\r\n      sessionLength: 25,\r\n      timerCount: 25 * 60,\r\n      currentTime: \"Session\",\r\n      intervalId: 0,\r\n      isPlaying: false,\r\n      isPlay: false,\r\n    };\r\n  }\r\n  //Break Length section================================\r\n  handleIncreaseBreak = () => {\r\n    this.setState((prevState) => {\r\n      return {\r\n        breakLength: prevState.breakLength + 1,\r\n      };\r\n    });\r\n  };\r\n\r\n  handleDecreaseBreak = () => {\r\n    this.setState((prevState) => {\r\n      return {\r\n        breakLength: prevState.breakLength - 1,\r\n      };\r\n    });\r\n  };\r\n\r\n  //Session Length section================================\r\n  handleIncreaseSession = () => {\r\n    this.setState((prevState) => {\r\n      return {\r\n        sessionLength: prevState.sessionLength + 1,\r\n        timerCount: (prevState.sessionLength + 1) * 60,\r\n      };\r\n    });\r\n  };\r\n\r\n  handleDecreaseSession = () => {\r\n    this.setState((prevState) => {\r\n      return {\r\n        sessionLength: prevState.sessionLength - 1,\r\n        timerCount: (prevState.sessionLength - 1) * 60,\r\n      };\r\n    });\r\n  };\r\n\r\n  handleSwitch = (isSession) => {\r\n    if (isSession) {\r\n      this.setState({\r\n        timerCount: this.state.sessionLength * 60,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        timerCount: this.state.breakLength * 60,\r\n      });\r\n    }\r\n  };\r\n\r\n  onResetTimer = () => {\r\n    this.setState({\r\n      timerCount: this.state.sessionLength,\r\n    });\r\n  };\r\n\r\n  onPlayStopTimer = (isPlay) => {\r\n    this.setState({\r\n      isPlay: this.state.isPlay,\r\n    });\r\n  };\r\n\r\n  handleUpdateTimerMinSec = (count) => {\r\n    const minute = Math.floor(count / 60);\r\n    let second = count % 60;\r\n\r\n    second = second < 10 ? \"0\" + second : second;\r\n    return `${minute}:${second}`;\r\n  };\r\n\r\n  onPlay = () => {\r\n    if (this.state.isPlaying) {\r\n      clearInterval(this.state.intervalId);\r\n      this.setState({\r\n        isPlaying: false,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        isPlaying: true,\r\n      });\r\n\r\n      this.state.intervalId = setInterval(() => {\r\n        if (this.state.timerCount === 0) {\r\n          if (this.state.isSession) {\r\n            this.setState({\r\n              isSession: false,\r\n            });\r\n            this.handleSwitch(this.state.isSession);\r\n          } else {\r\n            this.setState({\r\n              isSession: true,\r\n            });\r\n            this.handleSwitch(this.state.isSession);\r\n          }\r\n        } else {\r\n          this.setState({\r\n            timerCount: this.state.timerCount - 1,\r\n          });\r\n        }\r\n      }, 1000);\r\n    }\r\n  };\r\n\r\n  onReset = () => {\r\n    clearInterval(this.state.intervalId);\r\n\r\n    this.setState({\r\n      timerCount: 25 * 60,\r\n      isSession: true,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"main\">\r\n        <h2>~Pomodoro Clock~</h2>\r\n        <div className=\"break-session-container\">\r\n          <BreakInterval\r\n            isPlay={this.state.isPlaying}\r\n            breakInterval={this.state.breakLength}\r\n            increaseBreak={this.handleIncreaseBreak}\r\n            decreaseBreak={this.handleDecreaseBreak}\r\n          />\r\n          <SessionLength\r\n            isPlay={this.state.isPlaying}\r\n            sessionLength={this.state.sessionLength}\r\n            increaseSession={this.handleIncreaseSession}\r\n            decreaseSession={this.handleDecreaseSession}\r\n          />\r\n        </div>\r\n        <div className=\"timer-container\">\r\n          <h3 id=\"timer-label\">\r\n            {this.state.isSession === true ? this.state.currentTime : \"Break\"}\r\n          </h3>\r\n          <span id=\"time-left\">\r\n            {this.handleUpdateTimerMinSec(this.state.timerCount)}\r\n            {this.handleSwitch}\r\n            {this.onResetTimer}\r\n            {this.onPlayStopTimer}\r\n          </span>\r\n        </div>\r\n        <div className=\"timer-actions\">\r\n          <button id=\"start_stop\" onClick={this.onPlay}>\r\n            <i\r\n              className={`fas fa-${this.state.isPlaying ? \"pause\" : \"play\"}`}\r\n            ></i>\r\n          </button>\r\n          <button id=\"reset\" onClick={this.onReset}>\r\n            <i className=\"fas fa-sync-alt\"></i>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Timer;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Timer from \"./Timer\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Timer />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}