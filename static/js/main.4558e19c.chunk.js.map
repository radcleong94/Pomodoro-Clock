{"version":3,"sources":["BreakInterval.js","SessionLength.js","Timer.js","App.js","serviceWorker.js","index.js"],"names":["BreakInterval","props","class","id","className","disabled","isPlay","onClick","breakInterval","increaseBreak","decreaseBreak","SessionLength","sessionLenth","increaseSession","sessionLength","decreaseSession","Timer","onPlay","intervalId","setInterval","decreaseTimer","playStopTimer","setState","state","timerSecond","timerMinute","isSession","sessionSwitch","updateTimerMin","prevState","onStop","clearInterval","onReset","resetTimer","this","Component","App","handleIncreaseBreak","breakLength","handleDecreaseBreak","handleIncreaseSession","handleDecreaseSession","handleUpdateTimerMin","handleSwitch","onResetTimer","onPlayStopTimer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4558e19c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./BreakInterval.css\";\r\n\r\nexport default function BreakInterval(props) {\r\n  function increaseCounter() {\r\n    if (props.breakInterval === 60) {\r\n      return;\r\n    }\r\n    props.increaseBreak();\r\n  }\r\n\r\n  function decreaseCounter() {\r\n    if (props.breakInterval === 1) {\r\n      return;\r\n    }\r\n    props.decreaseBreak();\r\n  }\r\n\r\n  return (\r\n    <div class=\"break-section\">\r\n      <h4 id=\"break-label\">Break Length</h4>\r\n      <div className=\"btn-break-section\">\r\n        <button\r\n          disabled={props.isPlay === true ? \"disabled\" : \"\"}\r\n          id=\"break-increment\"\r\n          onClick={increaseCounter}\r\n        >\r\n          <i className=\"fas fa-arrow-circle-up\"></i>\r\n        </button>\r\n        <p id=\"break-length\">{props.breakInterval}</p>\r\n        <button\r\n          disabled={props.isPlay === true ? \"disabled\" : \"\"}\r\n          id=\"break-decrement\"\r\n          onClick={decreaseCounter}\r\n        >\r\n          <i className=\"fas fa-arrow-alt-circle-down\"></i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./SessionLength.css\";\r\n\r\nexport default function SessionLength(props) {\r\n  function increaseSession() {\r\n    if (props.sessionLenth === 60) {\r\n      return;\r\n    }\r\n    props.increaseSession();\r\n  }\r\n\r\n  function decreaseSession() {\r\n    if (props.sessionLength === 1) {\r\n      return;\r\n    }\r\n    props.decreaseSession();\r\n  }\r\n\r\n  return (\r\n    <div className=\"session-section\">\r\n      <h4 id=\"session-label\">Session Length</h4>\r\n      <div className=\"btn-session-section\">\r\n        <button\r\n          disabled={props.isPlay === true ? \"disabled\" : \"\"}\r\n          id=\"session-increment\"\r\n          onClick={increaseSession}\r\n        >\r\n          <i class=\"fas fa-arrow-circle-up\"></i>\r\n        </button>\r\n        <p id=\"session-length\">{props.sessionLength}</p>\r\n        <button\r\n          disabled={props.isPlay === true ? \"disabled\" : \"\"}\r\n          id=\"session-decrement\"\r\n          onClick={decreaseSession}\r\n        >\r\n          <i className=\"fas fa-arrow-alt-circle-down\"></i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./Timer.css\";\r\nimport BreakInterval from \"./BreakInterval\";\r\n\r\nclass Timer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      isSession: true,\r\n      timerSecond: 0,\r\n      intervalId: 0,\r\n    };\r\n  }\r\n\r\n  onPlay = () => {\r\n    let intervalId = setInterval(this.decreaseTimer, 1000);\r\n    this.props.playStopTimer(true);\r\n    this.setState({\r\n      intervalId: intervalId,\r\n    });\r\n  };\r\n\r\n  decreaseTimer = () => {\r\n    switch (this.state.timerSecond) {\r\n      case 0:\r\n        if (this.props.timerMinute === 0) {\r\n          if (this.state.isSession) {\r\n            this.setState({\r\n              isSession: false,\r\n            });\r\n\r\n            this.props.sessionSwitch(this.state.isSession);\r\n          } else {\r\n            this.setState({\r\n              isSession: true,\r\n            });\r\n\r\n            this.props.sessionSwitch(this.state.isSession);\r\n          }\r\n        } else {\r\n          this.props.updateTimerMin();\r\n          this.setState({\r\n            timerSecond: 59,\r\n          });\r\n        }\r\n        break;\r\n      default:\r\n        this.setState((prevState) => {\r\n          return {\r\n            timerSecond: prevState.timerSecond - 1,\r\n          };\r\n        });\r\n    }\r\n  };\r\n\r\n  onStop = () => {\r\n    clearInterval(this.state.intervalId);\r\n    this.props.playStopTimer(false);\r\n  };\r\n\r\n  onReset = () => {\r\n    this.onStop();\r\n    this.props.resetTimer();\r\n    this.props.playStopTimer(false);\r\n    this.setState({\r\n      timerSecond: 0,\r\n      isSession: true,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"timer-container\">\r\n          <h3 id=\"timer-label\">\r\n            {this.state.isSession === true ? \"Session\" : \"Break\"}\r\n          </h3>\r\n          <span id=\"time-left\">{this.props.timerMinute}</span>\r\n          <span>:</span>\r\n          <span>\r\n            {this.state.timerSecond === 0\r\n              ? \"00\"\r\n              : this.state.timerSecond < 10\r\n              ? \"0\" + this.state.timerSecond\r\n              : this.state.timerSecond}\r\n          </span>\r\n        </div>\r\n        <div className=\"timer-actions\">\r\n          <button id=\"start_stop\" onClick={this.onPlay}>\r\n            Play\r\n          </button>\r\n          <button onClick={this.onStop}>Stop</button>\r\n          <button id=\"reset\" onClick={this.onReset}>\r\n            Refresh\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Timer;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport BreakInterval from \"./BreakInterval\";\nimport SessionLength from \"./SessionLength\";\nimport Timer from \"./Timer\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      breakLength: 5,\n      sessionLength: 25,\n      timerMinute: 25,\n      isPlay: false,\n    };\n  }\n\n  //Break Length section================================\n  handleIncreaseBreak = () => {\n    this.setState((prevState) => {\n      return {\n        breakLength: prevState.breakLength + 1,\n      };\n    });\n  };\n\n  handleDecreaseBreak = () => {\n    this.setState((prevState) => {\n      return {\n        breakLength: prevState.breakLength - 1,\n      };\n    });\n  };\n\n  //Session Length section================================\n  handleIncreaseSession = () => {\n    this.setState((prevState) => {\n      return {\n        sessionLength: prevState.sessionLength + 1,\n        timerMinute: prevState.sessionLength + 1,\n      };\n    });\n  };\n\n  handleDecreaseSession = () => {\n    this.setState((prevState) => {\n      return {\n        sessionLength: prevState.sessionLength - 1,\n        timerMinute: prevState.sessionLength - 1,\n      };\n    });\n  };\n\n  handleUpdateTimerMin = () => {\n    this.setState((prevState) => {\n      return {\n        timerMinute: prevState.timerMinute - 1,\n      };\n    });\n  };\n\n  handleSwitch = (isSession) => {\n    if (isSession) {\n      this.setState({\n        timerMinute: this.state.sessionLenth,\n      });\n    } else {\n      this.setState({\n        timerMinute: this.state.breakLength,\n      });\n    }\n  };\n\n  onResetTimer = () => {\n    this.setState({\n      timerMinute: this.state.sessionLength,\n    });\n  };\n\n  onPlayStopTimer = (isPlay) => {\n    this.setState({\n      isPlay: isPlay,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"main\">\n        <h2>~Pomodoro Clock~</h2>\n        <div className=\"break-session-container\">\n          <BreakInterval\n            isPlay={this.state.isPlay}\n            breakInterval={this.state.breakLength}\n            increaseBreak={this.handleIncreaseBreak}\n            decreaseBreak={this.handleDecreaseBreak}\n          />\n          <SessionLength\n            isPlay={this.state.isPlay}\n            sessionLength={this.state.sessionLength}\n            increaseSession={this.handleIncreaseSession}\n            decreaseSession={this.handleDecreaseSession}\n          />\n        </div>\n        <Timer\n          timerMinute={this.state.timerMinute}\n          breakLength={this.state.breakLength}\n          updateTimerMin={this.handleUpdateTimerMin}\n          sessionSwitch={this.handleSwitch}\n          resetTimer={this.onResetTimer}\n          playStopTimer={this.onPlayStopTimer}\n        />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}